
- name: Ensure PX-Backup namespace exists
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ pxbackup_namespace }}"
    
- name: Get Prometheus TLS certificate
  shell: >
    oc get secret prometheus-user-workload-tls
    -n openshift-user-workload-monitoring
    -o jsonpath="{.data.tls\.crt}" | base64 -d
  register: prometheus_cert
  changed_when: false

- name: Get Prometheus token
  shell: >
    oc create token prometheus-k8s
    -n openshift-monitoring --duration=87600h
  register: prometheus_token
  changed_when: false

- name: Get Alertmanager TLS certificate
  shell: >
    oc get secret alertmanager-user-workload-tls
    -n openshift-user-workload-monitoring
    -o jsonpath="{.data.tls\.crt}" | base64 -d
  register: alertmanager_cert
  changed_when: false

- name: Get Alertmanager token
  shell: >
    oc create token thanos-ruler
    -n openshift-user-workload-monitoring --duration=87600h
  register: alertmanager_token
  changed_when: false

- name: Create prometheus-cred secret in PX-Backup namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-cred
        namespace: "{{ pxbackup_namespace }}"
      stringData:
        cert: "{{ prometheus_cert.stdout }}"
        token: "{{ prometheus_token.stdout }}"

- name: Create alertmanager-cred secret in PX-Backup namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: alertmanager-cred
        namespace: "{{ pxbackup_namespace }}"
      stringData:
        cert: "{{ alertmanager_cert.stdout }}"
        token: "{{ alertmanager_token.stdout }}"

